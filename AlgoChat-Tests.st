TestCase subclass: #AlgoChatTest	instanceVariableNames: ''	classVariableNames: ''	package: 'AlgoChat-Tests'!!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test04UsuarioAgregadoAConversacionRecibeNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat crearConversacionConUsuarios: 'juan,maria,jose'.		algoChat publicarMensaje: 'hola' enConversacion: 'juan,maria,jose'.	algoChat publicarMensaje: 'como va' enConversacion: 'juan,maria,jose'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: 'hola | como va'.	self assert: (algoChat getMensajesDeConversacion: 'juan,maria,jose') equals: 'hola | como va'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:25'!test08UsuarioPuedeReanudarNotificacionesDePalabrasDeUnCanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat reanudarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.	algoChat publicarMensaje: 'libreta olvidada en la clase' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | libreta olvidada en la clase'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'CristianTorales 9/15/2019 19:55'!test05UsuarioEnCanalRecibeNotificacionesCuandoMencionanSuNombre	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.	algoChat agregarUsuario: 'jose' alCanal: 'anuncios'.	algoChat publicarMensaje: 'por favor @maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: 'hoy no hace falta que venga @pedro a clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer la libreta' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan como estas?' enCanal: 'consultas'.  		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'por favor @maria y @juan venir a clase hoy | @juan traer la libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'por favor @maria y @juan venir a clase hoy'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/23/2019 22:58'!test00AlgoChatVacioNoTieneUsuariosNiCanales	| algoChat |	algoChat := AlgoChat new.	self assert: algoChat getCantidadUsuarios equals: 0.	self assert: algoChat getCantidadCanales equals: 0.! !!AlgoChatTest methodsFor: 'tests' stamp: 'CristianTorales 9/9/2019 19:30'!test01UsuarioNuevoRecibeMensajesComoNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'pedro'.		algoChat enviarMensaje: 'hola juan' aUsuario: 'juan'.	algoChat enviarMensaje: 'como va' aUsuario: 'juan'.	  self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola juan | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'juan' resumidasALongitud: 4) equals: 'hola... | como...'. 	self assert: (algoChat getNotificacionesDeUsuario: 'pedro') equals: ''. ! !!AlgoChatTest methodsFor: 'tests' stamp: 'CristianTorales 9/18/2019 17:30'!test03UsuarioAgregadoACanalNoRecibeNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'. 	algoChat publicarMensaje: 'clase de hoy suspendida' enCanal: 'anuncios'. 		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: ''. ! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test06UsuarioPuedeElegirPalabrasParaSerNotificado	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'juan' alCanal: 'consultas'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'parcial' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'libreta' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro aprobo el parcial' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro traer libreta' enCanal: 'anuncios'.	algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'consultas'.	algoChat publicarMensaje: 'libreta perdida' enCanal: 'consultas'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @pedro aprobo el parcial | cartuchera olvidada en la clase'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | @pedro traer libreta'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test07UsuarioPuedePausarNotificacionesDePalabrasDeUnCanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'clase' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer libreta' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @juan traer libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | cartuchera olvidada en la clase'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/26/2019 15:06'!test02EnviarMensajesACanalGuardaLosMensajes	| algoChat |	algoChat := AlgoChat new.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.	algoChat publicarMensaje: 'tp0 publicado' enCanal: 'anuncios'.	algoChat publicarMensaje: 'fecha limite 30/8' enCanal: 'anuncios'.	algoChat publicarMensaje: 'se entrega por campus' enCanal: 'anuncios'.		self assert: (algoChat mensajesDelCanal: 'anuncios') equals: 'tp0 publicado | fecha limite 30/8 | se entrega por campus'.	self assert: (algoChat mensajesDelCanal: 'anuncios' resumidosALongitud: 3) equals: 'tp0... | fec... | se ...'.	self assert: (algoChat mensajesDelCanal: 'anuncios' resumidosALongitud: 2) equals: 'tp... | fe... | se...'.	self assert: (algoChat mensajesDelCanal: 'consultas') equals: ''.	! !TestCase subclass: #CanalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'AlgoChat-Tests'!!CanalTest methodsFor: 'tests' stamp: 'CristianTorales 9/19/2019 00:28'!test05agregarUsuarioNotificablePorPalabraClaveYVerificarQueExiste| canal  usuarioNuevo |canal := Canal new.canal agregarUsuarioConNombre: 'CrisT'.canal agregarUsuarioConNombre: 'Jony'.canal agregarUsuarioNotificablePorPalabraClave: 'CrisT'.usuarioNuevo := canal getUsuarioNotificableConNombre: 'CrisT'.self assert: usuarioNuevo obtenerNombre  equals: 'CrisT'.! !!CanalTest methodsFor: 'tests' stamp: 'CristianTorales 9/17/2019 15:10'!test04agregarUsuarioPausadoYVerificarQueEsteAgregado| canal usuarioPausado unUsuario |canal := Canal new.canal agregarUsuarioConNombre: 'CrisT'.unUsuario :=canal getUsuarioDelCanalConNombre: 'CrisT'.canal agregarUsuarioPausadoPorPalabraClave: unUsuario.usuarioPausado := canal getUsuarioPausadoPorPalabraClave: 'CrisT'.self assert: usuarioPausado obtenerNombre equals: 'CrisT'.! !!CanalTest methodsFor: 'tests' stamp: 'CristianTorales 9/18/2019 12:24'!test03seAgreganUsuariosAlCanalYSeVerificaQueExisten| canal   unUsuario  |canal := Canal new.canal definirNombreDeCanal: 'electro'.canal agregarUsuarioConNombre:  'cris'.unUsuario := canal getUsuarioDelCanalConNombre: 'cris'.self assert: unUsuario obtenerNombre  equals: 'cris'.! !!CanalTest methodsFor: 'tests' stamp: 'CristianTorales 9/17/2019 16:45'!test04seAgreganMensajesAlCanalYSeObtieneUnaSolaCadenaDeLosMensajesSeparadaPorUnDelimitador| canal  todosLosMensajes |canal := Canal new.canal agregarUsuarioConNombre: 'CrisT'.canal agregarMensaje: 'Hola Cris'.canal agregarMensaje: 'Hola'.todosLosMensajes :=  canal getMensajes.self assert: todosLosMensajes equals: 'Hola Cris | Hola'.! !!CanalTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 21:43'!test02agregarMensajeAUnCanalYVerificarQueExiste| unCanal |unCanal := Canal  new.unCanal agregarMensaje: 'Hola canal'.self assert:  unCanal  getMensajes  equals: 'Hola canal'.! !!CanalTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 21:38'!test01seCreaUnCanalYSeVerificaQueExiste| unCanal |unCanal := Canal new.unCanal definirNombreDeCanal:  'Algo3'.self assert: unCanal getNombreDelCanal equals: 'Algo3'.! !TestCase subclass: #ConjuntoDeUsuariosTest	instanceVariableNames: ''	classVariableNames: ''	package: 'AlgoChat-Tests'!!ConjuntoDeUsuariosTest methodsFor: 'tests' stamp: 'CristianTorales 9/18/2019 18:16'!test01obtenerUnSubconjuntoDeUsuariosAPartirDeDosDiccionarios| unDiccionario   conjuntoDeUsuarios nuevoConjunto bool unUsuario bool1 |unUsuario := Usuario  new.unUsuario definirNombre: 'Cris'.unDiccionario := Dictionary  new.unDiccionario at: unUsuario obtenerNombre  put: unUsuario.conjuntoDeUsuarios := ConjuntoDeUsuarios new.conjuntoDeUsuarios agregarUsuario: unUsuario.conjuntoDeUsuarios agregarUsuarioConNombre: 'T'.conjuntoDeUsuarios agregarUsuarioConNombre: 'C'.nuevoConjunto := conjuntoDeUsuarios buscarDiferenciasConOtroConjunto: unDiccionario.bool := nuevoConjunto includesKey: 'T'.bool1 := nuevoConjunto includesKey: 'C'.self assert: bool1. self assert: bool.self assert:  nuevoConjunto size equals: 2. ! !!ConjuntoDeUsuariosTest methodsFor: 'tests' stamp: 'CristianTorales 9/17/2019 00:54'!test00agregarUnUsuarioAlConjuntoYObtenerlo| conjuntoDeUsuarios  unUsuario |conjuntoDeUsuarios := ConjuntoDeUsuarios new.conjuntoDeUsuarios agregarUsuarioConNombre: 'cris'.unUsuario := conjuntoDeUsuarios getUnUsuario: 'cris'.self assert:   unUsuario obtenerNombre equals: 'cris'.! !TestCase subclass: #ConversacionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'AlgoChat-Tests'!!ConversacionTest methodsFor: 'tests' stamp: 'CristianTorales 9/15/2019 17:46'!test02seRecibenTresNombresDeUsuariosYLaConversacionDebeContenerALosMismos|unaConversacion chat |chat := AlgoChat new.chat agregarUsuarioConNombre: 'juan'.chat agregarUsuarioConNombre: 'pablo'.chat agregarUsuarioConNombre: 'pedro'.chat  crearConversacionConUsuarios: 'juan,pablo,pedro'.unaConversacion := chat getConversacion: 'juan,pablo,pedro'.self assert:  unaConversacion getCantidadDeUsuarios equals: 3.! !!ConversacionTest methodsFor: 'tests' stamp: 'CristianTorales 9/17/2019 16:29'!test03seAgreganMensajesALaConversacionYSeObtieneUnaSolaCadenaDeLosMensajesSeparadaPorUnDelimitador|unaConversacion chat todosLosMensajes |chat := AlgoChat new.chat agregarUsuarioConNombre: 'juan'.chat agregarUsuarioConNombre: 'pablo'.chat agregarUsuarioConNombre: 'pedro'.chat  crearConversacionConUsuarios: 'juan,pablo,pedro'.unaConversacion := chat getConversacion: 'juan,pablo,pedro'.unaConversacion recibirPublicacion:  'Hola, que haces?'.unaConversacion recibirPublicacion:  'Hola, nada'.todosLosMensajes := unaConversacion getMensajesDeLaConversacion.self assert: todosLosMensajes equals: 'Hola, que haces? | Hola, nada'! !TestCase subclass: #NotificadorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'AlgoChat-Tests'!!NotificadorTest methodsFor: 'tests' stamp: 'CristianTorales 9/18/2019 20:43'!test01enviarUnMensajeAUnGrupoDeUsuariosYVericarQueRecibanElMensaje| unNotificador unConjuntoDeUsuarios unUsuario otroUsuario mensajesDeUnUsuario mensajesDeOtroUsuario |unConjuntoDeUsuarios := ConjuntoDeUsuarios new.unUsuario := Usuario  new.unUsuario definirNombre: 'Cris'.otroUsuario := Usuario  new.otroUsuario definirNombre: 'T'.unConjuntoDeUsuarios agregarUsuario: unUsuario.unConjuntoDeUsuarios agregarUsuario: otroUsuario.unNotificador := Notificador new.unNotificador notificarMensaje: 'Hola a todos' a: unConjuntoDeUsuarios. mensajesDeUnUsuario := unUsuario getNotificaciones.mensajesDeOtroUsuario := otroUsuario getNotificaciones.self assert: mensajesDeUnUsuario equals: 'Hola a todos'.self assert: mensajesDeOtroUsuario equals: 'Hola a todos'.! !TestCase subclass: #UsuarioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'AlgoChat-Tests'!!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/9/2019 19:05'!test04seAgregaUnMensajeAUnUsuario| usuario |usuario := Usuario new.usuario agregarMensaje: 'Hola T'.self assert: usuario getMensajes equals: 'Hola T'. ! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/9/2019 19:25'!test05incrementarCantidadDeMensajesYVerificarElValor"Se cargaron dos mensajes a un usuario temporal y se comprobó que tiene los dos mensajes."| chat cantidad usuarioCargado |chat := AlgoChat new.chat agregarUsuarioConNombre: 'T'.chat enviarMensaje: 'Holis' aUsuario: 'T'. chat enviarMensaje: 'Hola' aUsuario: 'T'.  usuarioCargado :=  chat getUsuario: 'T'.cantidad :=  usuarioCargado getCantidadDeMensajes.self assert:   cantidad equals: 2.! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 21:30'!test01UsuarioSeCreaYSeVerificaQueExiste| nuevoUsuario |nuevoUsuario := Usuario new.nuevoUsuario definirNombre: 'Carlitos'.self assert: nuevoUsuario obtenerNombre equals: 'Carlitos'.! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 18:50'!test06SeCreanDosUsuariosIgualesYSoloUnoDebeExistir"Preguntar como hacer la validación de esto."| chat |chat := AlgoChat new.chat agregarUsuarioConNombre: 'CristianT'.chat agregarUsuarioConNombre: 'CristianT'."coleccionDeRepetidos := chat getListaDeUsuariosRepetidos: 'CristianT'."self deny: chat getCantidadUsuarios equals: 2.! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/15/2019 20:59'!test07seCreaUnUsuarioYSeCompruebaElLlamadoAlMismo| unUsuario unNombreDeLlamado |unUsuario := Usuario new.unUsuario definirNombre: 'TioCacho'.unNombreDeLlamado := unUsuario getLlamadoAUsuario.self assert:  unNombreDeLlamado equals: '@TioCacho'.! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/16/2019 03:17'!test08seAgregaPalabraClaveAUnUsuarioYSeVerificaQueExista| chat usuarioActual palabra |chat := AlgoChat new.chat agregarUsuarioConNombre: 'cris'.usuarioActual := chat getUsuario: 'cris'.usuarioActual  agregarPalabraClave: 'hola'.palabra := usuarioActual getPalabraClave: 'hola'.self assert: palabra equals: 'hola'. ! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 18:29'!test03seIncrementaLaCantidadDeUsuariosYSeVerificaElIncremento| chat cantidad |chat := AlgoChat new.chat agregarUsuarioConNombre: 'Cris'.chat agregarUsuarioConNombre: 'T'.cantidad := chat getCantidadUsuarios.self assert: cantidad equals: 2.! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 20:28'!test06sePideLasNotificacionesDeUnUsuarioYDevuelveMensajesConcatenados| unUsuario notificaciones |unUsuario := Usuario new.unUsuario agregarMensaje: 'hola'.unUsuario agregarMensaje: 'que haces'.notificaciones := unUsuario getNotificaciones.self assert: notificaciones equals: 'hola | que haces'.! !!UsuarioTest methodsFor: 'tests' stamp: 'CristianTorales 9/14/2019 21:39'!test02agregarMensaje| unUsuario |unUsuario := Usuario new.unUsuario agregarMensaje: 'Hola Cris'.self assert:  unUsuario getNotificaciones equals: 'Hola Cris'.! !